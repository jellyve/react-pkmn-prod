{"version":3,"sources":["Component/User/User.js","Component/Setup.tsx","App.js","Component/Health.tsx","reportWebVitals.js","index.js"],"names":["UserContext","createContext","Setup","props","useContext","user","setUser","console","log","useState","playerName","setPlayerName","playerPetName","setPlayerPetName","rivalName","setRivalName","rivalPetName","setRivalPetName","setupFinished","setSetupFinished","className","disabled","value","onChange","event","target","onClick","App","userContextValue","healthInput","setHealthInput","storedHealth","setHealth","healthDescriptionStringFinal","sethealthDescriptionStringFinal","petName","setPetName","useEffect","healthTestValue","name","healthDescriptions","possibleHealthDescriptions","i","length","minHealth","maxHealth","push","Math","floor","random","description","checkHealth","User","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b2f46e4.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst UserContext = createContext(\r\n//     {\r\n//     user: {\r\n//         playerName: 'player',\r\n//         playerPetName: 'baby',\r\n//         rivalName: 'rival',\r\n//         rivalPetName: 'bitey'\r\n//       },\r\n//     setUser: () => {}\r\n//   }\r\n  );\r\nexport default UserContext;","import * as React from 'react';\r\nimport { useState, useContext } from 'react';\r\nimport UserContext from './User/User';\r\n\r\ninterface SetupProps{\r\n    playerName: string;\r\n    playerPetName: string;\r\n    rivalName: string;\r\n    rivalPetName: string;\r\n}\r\n\r\nexport const Setup: React.FC<SetupProps> = (props) => {\r\n    const {user, setUser} = useContext(UserContext);\r\n\r\n    console.log(\"user\",user);\r\n\r\n    const [playerName, setPlayerName] = useState(user.playerName);\r\n    const [playerPetName, setPlayerPetName] = useState(user.playerPetName);\r\n    const [rivalName, setRivalName] = useState(user.rivalName);\r\n    const [rivalPetName, setRivalPetName] = useState(user.rivalPetName);\r\n    const [setupFinished, setSetupFinished] = useState(false);\r\n\r\n    function startGame(){\r\n        setUser({\r\n            playerName: playerName,\r\n            playerPetName: playerPetName,\r\n            rivalName: rivalName,\r\n            rivalPetName: rivalPetName\r\n          });\r\n        setSetupFinished(true);\r\n    }\r\n  \r\n    return (\r\n      <div className=\"setup-div\">\r\n        <input disabled={setupFinished} value={playerName} onChange={event => setPlayerName(event.target.value)}/>\r\n        <input disabled={setupFinished} value={playerPetName} onChange={event => setPlayerPetName(event.target.value)}/>\r\n        <input disabled={setupFinished} value={rivalName} onChange={event => setRivalName(event.target.value)}/>\r\n        <input disabled={setupFinished} value={rivalPetName} onChange={event => setRivalPetName(event.target.value)}/>\r\n        <button onClick={() => startGame()}>Start</button>\r\n      </div>\r\n    );\r\n  };","import { useState, useEffect } from 'react';\nimport './App.css';\nimport { Setup } from './Component/Setup';\nimport { checkHealth } from './Component/Health';\nimport UserContext from './Component/User/User';\n\n\nfunction App() {\n  const [user, setUser] = useState({\n    playerName: 'player',\n    playerPetName: 'baby',\n    rivalName: 'rival',\n    rivalPetName: 'bitey'\n  });\n  const userContextValue = {user, setUser};\n\n  console.log(\"user\",user);\n\n  const [healthInput, setHealthInput] = useState(0);\n  const [storedHealth, setHealth] = useState(0);\n  const [healthDescriptionStringFinal, sethealthDescriptionStringFinal] = useState(\"\");\n  const [petName, setPetName] = useState(\"pet\");\n  \n  useEffect(() => {\n    sethealthDescriptionStringFinal(checkHealth(storedHealth,petName));\n  },[storedHealth, petName]);\n  \n  return (\n    <UserContext.Provider value={userContextValue}>\n      <div>\n        <h1>please azure PLEASE</h1>\n        <div>\n          <Setup \n          // playerName=\"player\" playerPetName=\"baby\" rivalName=\"rival\" rivalPetName=\"bitey\"\n          />\n          <div>{user.playerName}\n          </div>\n        </div>\n        <input onChange={event => setPetName(event.target.value)}/>\n        <input onChange={event => setHealthInput(event.target.value)}/>\n        <button onClick={() => setHealth(healthInput)}>Click me</button>\n        <div>{storedHealth}</div>\n        <div>{healthDescriptionStringFinal}</div>\n      </div>\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n","// import React from 'react';\r\n\r\nexport const checkHealth = (healthTestValue:number, name:string) => {\r\n  // console.log(\"healthTestValue\",healthTestValue);\r\n  let healthDescriptions = \r\n    [{\"id\": 1,\"minHealth\": 0,\"maxHealth\": 0,\"description\": `Your ${name} has fainted!`},\r\n    {\"id\": 2,\"minHealth\": 1,\"maxHealth\": 10,\"description\": `Your ${name} is about to faint!`},\r\n    {\"id\": 3,\"minHealth\": 1,\"maxHealth\": 25,\"description\": `Your ${name} is only just holding on!`},\r\n    {\"id\": 4,\"minHealth\": 10,\"maxHealth\": 50,\"description\": `Your ${name} is in pain.`},\r\n    {\"id\": 5,\"minHealth\": 20,\"maxHealth\": 70,\"description\": `Your ${name} has taken some hard hits.`},\r\n    {\"id\": 6,\"minHealth\": 40,\"maxHealth\": 80,\"description\": `Your ${name} has a few cuts and bruises.`},\r\n    {\"id\": 7,\"minHealth\": 60,\"maxHealth\": 90,\"description\": `Your ${name} has a few scuff marks.`},\r\n    {\"id\": 8,\"minHealth\": 70,\"maxHealth\": 100,\"description\": `Your ${name} looks happy and content!`},\r\n    {\"id\": 9,\"minHealth\": 80,\"maxHealth\": 100,\"description\": `Your ${name} is in perfect health!`},\r\n  ];\r\n  // console.log(\"healthDescriptions\",healthDescriptions);\r\n  let possibleHealthDescriptions = [];\r\n  \r\n  for(let i=0; i<healthDescriptions.length; i++){\r\n    if(healthTestValue>=healthDescriptions[i].minHealth){\r\n      if(healthTestValue<=healthDescriptions[i].maxHealth){\r\n        possibleHealthDescriptions.push(healthDescriptions[i])\r\n      }\r\n    }\r\n  }\r\n  // console.log(\"possibleHealthDescriptions\",possibleHealthDescriptions);\r\n  \r\n  if(possibleHealthDescriptions.length===0){\r\n    possibleHealthDescriptions.push({\"id\": 10,\"minHealth\": 0,\"maxHealth\": 100,\"description\": \"broken!\"})\r\n  }\r\n  // console.log(\"possibleHealthDescriptions\",possibleHealthDescriptions);\r\n  \r\n  let randDescriptionPosition =  Math.floor(Math.random() * (possibleHealthDescriptions.length));\r\n  // console.log(\"randDescriptionPosition\",randDescriptionPosition);\r\n  // console.log(\"possibleHealthDescriptions[randDescriptionPosition]\",possibleHealthDescriptions[randDescriptionPosition]);\r\n  // console.log(possibleHealthDescriptions[randDescriptionPosition].description);\r\n  let descriptionValue=possibleHealthDescriptions[randDescriptionPosition].description;\r\n  return descriptionValue;\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}